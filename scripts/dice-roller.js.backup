class DiceRollerWithPrompt extends Application {
  constructor(options = {}) {
    super(options);
    this.diceFormula = ""; // Store the dice formula
  }

  static get defaultOptions() {
    // Use foundry.utils.mergeObject
    return foundry.utils.mergeObject(super.defaultOptions, {
      id: "dice-roller-prompt",
      template: "modules/my-dice-module/templates/dice-roller-prompt.html", // Path to your HTML template
      title: "Roll Dice",
      width: 300,
      height: "auto",
      resizable: false,
    });
  }

  getData() {
    return {
      diceFormula: this.diceFormula,
    };
  }

  activateListeners(html) {
    super.activateListeners(html);
    html.find("#roll-button").click(this._onRoll.bind(this));
    html.find("#dice-formula").change(this._onFormulaChange.bind(this));
  }

  _onFormulaChange(event) {
    this.diceFormula = event.target.value;
  }

  async _onRoll(event) {
    event.preventDefault();

    let formula = this.diceFormula;

    if (!formula) {
      ui.notifications.warn("Please enter a dice formula.");
      return;
    }

    try {
      // Attempt to parse the formula to catch errors early
      await new Roll(formula).evaluate();

      // Roll the dice and display the result
      let roll = await new Roll(formula).roll();
      roll.toMessage({
        speaker: ChatMessage.getSpeaker({ alias: game.user.name }),
        flavor: `Dice Roll`,
      });
      this.close(); // Close the dialog after rolling
    } catch (error) {
      ui.notifications.error(
        `Invalid dice formula: ${error.message}. Please use standard dice notation (e.g., 1d20, 2d6+3).`
      );
    }
  }
}
Hooks.on("ready", async () => {
  // Use 'ready' hook
  // Create the "Hope and Fear Roll" macro if it doesn't exist
  let hopeAndFearMacro = game.macros.find(
    (m) => m.name === game.i18n.localize("YOURMODULE.HopeAndFearRoll")
  );
  if (!hopeAndFearMacro) {
    await Macro.create({
      name: game.i18n.localize("YOURMODULE.HopeAndFearRoll"),
      type: "script",
      command: async () => {
        // Make the command async
        try {
          let hope_roll = await new Roll("1d12").evaluate({ async: true });
          hope_roll.dice[0].options.appearance = {
            foreground: "#ffffff",
            edge: "#000000",
            background: "#acafb2",
          };

          let fear_roll = await new Roll("1d12").evaluate({ async: true });
          fear_roll.dice[0].options.appearance = {
            foreground: "#ffffff",
            edge: "#000000",
            background: "#ea222b",
          };

          hope_roll.toMessage({
            speaker: ChatMessage.getSpeaker({
              alias: game.i18n.localize("YOURMODULE.DiceRollerAlias"),
            }), // Localized speaker alias
            flavor: game.i18n.localize("YOURMODULE.RollingHopeDice"), // Localized flavor text
            rollMode: CONST.DICE_ROLL_MODES.PUBLIC,
          });

          fear_roll.toMessage({
            speaker: ChatMessage.getSpeaker({
              alias: game.i18n.localize("YOURMODULE.DiceRollerAlias"),
            }), // Localized speaker alias
            flavor: game.i18n.localize("YOURMODULE.RollingFearDice"), // Localized flavor text
            rollMode: CONST.DICE_ROLL_MODES.PUBLIC,
          });

          let hope_results = hope_roll.terms[0].results;
          let fear_results = fear_roll.terms[0].results;

          let total = hope_results[0].result + fear_results[0].result;

          let messageContent;
          let speakerAlias;

          if (hope_results[0].result > fear_results[0].result) {
            speakerAlias = game.i18n.localize("YOURMODULE.HopeRollMessage"); // Localized message
            messageContent = `${game.i18n.localize(
              "YOURMODULE.Result"
            )}: ${total} \n ${game.i18n.localize(
              "YOURMODULE.HopeRollExclamation"
            )}`; // Localized message
          } else {
            speakerAlias = game.i18n.localize("YOURMODULE.FearRollMessage"); // Localized message
            messageContent = `${game.i18n.localize(
              "YOURMODULE.Result"
            )}: ${total} \n ${game.i18n.localize(
              "YOURMODULE.FearRollExclamation"
            )}`; // Localized message
          }

          ChatMessage.create({
            speaker: ChatMessage.getSpeaker({ alias: speakerAlias }),
            content: messageContent,
            type: CONST.CHAT_MESSAGE_TYPES.OOC, // Use CONST.CHAT_MESSAGE_TYPES
          });
        } catch (error) {
          console.error("Error rolling dice:", error);
          ui.notifications.error(
            game.i18n.localize("YOURMODULE.DiceRollError") +
              `: ${error.message}`
          ); // Localized error message
        }
      },
      img: "icons/magic/symbols/runes-star-blue.webp",
    });
  }
});

// Register the application and a macro
Hooks.on("init", () => {
  // Register Handlebars helper for localization (if needed)
  Handlebars.registerHelper("localize", function (string) {
    return game.i18n.localize(string);
  });

  game.settings.register("my-dice-module", "openDiceRoller", {
    name: "Open Dice Roller",
    hint: "Opens the dice roller prompt.",
    scope: "client",
    config: false, // Don't show in module settings
    type: Boolean,
    default: false,
    onChange: (value) => {
      if (value) {
        new DiceRollerWithPrompt().render(true);
        game.settings.set("my-dice-module", "openDiceRoller", false); // Reset the setting
      }
    },
  });
});
